import React, { useEffect, useState, useRef } from 'react';
import { connect } from 'react-redux';
import { useInView } from 'react-intersection-observer';

import { fetchGalleryPhotos } from 'actions/gallery';

import './gallery.scss';

function Gallery({ fetchGalleryPhotos, isFetching, photos, errors }) {

    const [ref, inView] = useInView({
        threshold: 1
    });

    useEffect(() => {
        console.log(inView);
        if (inView) {
            setLimit((limit) => limit + 12);
        }
    }, [inView]);

    const [page] = useState(1);
    const [limit, setLimit] = useState(16);
    const [element, setElement] = useState(null);

    const prevYRef = useRef(0);
    const observer = useRef(new IntersectionObserver(
        (entries) => {
            const firstEntry = entries[0];
            const y = firstEntry.boundingClientRect.y;

            if (prevYRef.current > y) {
                setLimit((limit) => limit + 12);
            }

            prevYRef.current = y;
        },
        { threshold: 1 }
    ));

    useEffect(() => {
        fetchGalleryPhotos(page, limit);
    }, [fetchGalleryPhotos, page, limit]);

    useEffect(() => {
        const currentElement = element;
        const currentObserver = observer.current;

        if (currentElement) {
            currentObserver.observe(currentElement);
        }

        return () => {
            if (currentElement) {
                currentObserver.observe(currentElement);
            }
        };
    }, [element]);

    return (
        <main className="main">
            <div className="container">
                <article className="gallery">
                    <h1>Галерея</h1>
                    {errors && (<p>Error</p>)}
                    <div className="photos">
                        {!errors && photos.map((photo) => (
                            <Figure key={photo.id} {...photo} />
                        ))}
                    </div>
                    <button
                        ref={ref}
                        type="button"
                    >
                        {photos.length >= 100 ? <span>Больше нету</span> : isFetching ? <span>Loading...</span> : <span>Показать еще</span>}
                    </button>
                </article>
            </div>
        </main>
    );
}

const mapStateToProps = (state) => ({
    photos: state.gallery.photos,
    isFetching: state.gallery.isFetching,
    errors: state.gallery.errors,
});

const mapDispatchToProps = {
    fetchGalleryPhotos
};

export default connect(mapStateToProps, mapDispatchToProps)(Gallery);

// https://via.placeholder.com/250x150

function Figure({
    id,
    author,
    url = 'https://via.placeholder.com/250x150',
    download_url = 'https://via.placeholder.com/250x150',
    width,
    height
}) {

    return (
        <figure className="photo">
            <img src='https://via.placeholder.com/250x150' alt={author} />
            {/* <figcaption>{author}</figcaption> */}
        </figure>
    );
}